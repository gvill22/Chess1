#ifndef _BOARD_HPP_
#define _BOARD_HPP_

#include "ChessPiece.hpp"

class Board{

    class Squares{
        private:
            ChessPiece* currentPiece;
        public:    
            ChessPiece* getCurrentPiece() const {return CurrentPiece};
            void setCurrentPiece(ChessPiece* newPiece) {currentPiece = newPiece; };
    };

    private:
        squares gameBoard[8][8];

    public:
        // default constructor will set up the board so that all of the squares in the board
        // contain a null pointer essemtially the board is empty
        board();

        // This function will setup our board to be a standard 16 piece vs 16 piece chess board
        void setupBoard();

        // We will get all of the moves for a specific piece by accessing the piece
        // that is pointed to in the square object at that coordinate on our gameboard
        std::vector<std::pair<int,int>> getMoves(std::pair<int,int> coordinates);

        // this function will display all of the possible moves for a given piece
        // this function will take in the vector of moves generated by getMovees
        void displayMoves(std::vector<std::pair<int,int>> moveList);

        // This function will change some pointers around and move a specific piece
        // to a diffirent square setting the old square's piece to null to signify empty
        // in Addition to this there might be a need to make an eatPiece function that
        // could delete the piece object because it was dynamically allocated
        void makeMove();
        

};