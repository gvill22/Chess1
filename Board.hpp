#ifndef _BOARD_HPP_
#define _BOARD_HPP_

#include "ChessPiece.hpp"
#include "Pieces.hpp"
#include <iostream>

class Board{


// It looks like this is supper unnecessary
class Squares{
    private:
        ChessPiece* currentPiece;
    public:    
        ChessPiece* getCurrentPiece() const;
        void setCurrentPiece(ChessPiece* newPiece);
};

private:

    Squares gameBoard[8][8];

public:
    // default constructor will set up the board so that all of the squares in the board
    // contain a null pointer essemtially the board is empty
    Board();

    // This function will setup our board to be a standard 16 piece vs 16 piece chess board
    void setupBoard();

    // This function will display the current state of the board
    void displayBoard();

    // We will get all of the moves for a specific piece by accessing the piece
    // that is pointed to in the square object at that coordinate on our gameboard
    std::vector<std::pair<int,int>> getMoves(std::pair<int,int> coordinates);

    // this function will display all of the possible moves for a given piece
    // this function will take in the vector of moves generated by getMovees
    void displayMoves(std::vector<std::pair<int,int>> moveList);

    // This function will change some pointers around and move a specific piece
    // to a diffirent square setting the old square's piece to null to signify empty
    // in Addition to this there might be a need to make an eatPiece function that
    // could delete the piece object because it was dynamically allocated
    void makeMove(std::pair<int,int> selectedPiece, std::pair<int,int> moveHere);


    std::pair<std::string, std::string> getPieceNameAndColor(std::pair<int,int> coordinates);



    //This function will remove moves from the movelist that are aimed at friendly pieces
    std::vector<std::pair<int,int>> removeFriendlyFireMoves(std::vector<std::pair<int,int>> &moveList, const ChessPiece* piece);


    std::vector<std::pair<int,int>> removeInvalidPawnMoves(std::vector<std::pair<int,int>> &moves, const ChessPiece* piece);


    //this function will return a constant pointer to a chess piece object
    // at the given coordinates
    const ChessPiece* getPieceAtCoordinates(std::pair<int,int> coordinates);

    // This function will prompt the user to enter a move
    void welcomePrompt();

    // This function will prompt the user to enter a new piece or make a move from the list of available moves
    void promptNewPieceOrMakeMove();

    
    // This function will take in user input and return a pair of ints
    std::pair<int,int> readUserSelectedPiece();

    // This function will take in user input and return a pair of ints
    std::pair<int,int> readUserMove();

    // Whether or not the user wants to make a move or select a new piece
    int readUserSelection();

    // This function will check if the game is over
    bool isGameOver();




};

#endif